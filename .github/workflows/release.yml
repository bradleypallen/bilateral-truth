name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install build twine
    
    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = .*/version = "${{ github.event.inputs.version }}"/' pyproject.toml
    
    - name: Update version in __init__.py
      run: |
        sed -i 's/__version__ = .*/__version__ = "${{ github.event.inputs.version }}"/' bilateral_truth/__init__.py
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short -k "not integration"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation - you might want to use a more sophisticated tool
        echo "## Changes in v${{ github.event.inputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml bilateral_truth/__init__.py
        git commit -m "Release v${{ github.event.inputs.version }}" || exit 0
        git push
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: bilateral-truth-${{ github.event.inputs.version }}.tar.gz
        asset_content_type: application/gzip